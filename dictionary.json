{
	"API": "Описание способов (набор классов, процедур, функций, структур или констант), которыми одна компьютерная программа может взаимодействовать с другой программой.",
	"APPLICATION PROGRAMMING INTERFACE": "Описание способов (набор классов, процедур, функций, структур или констант), которыми одна компьютерная программа может взаимодействовать с другой программой.",
	"AUTOMATION": "Одно из направлений научно-технического прогресса, использующее саморегулирующие технические средства и математические методы с целью освобождения человека от участия в процессах получения, преобразования, передачи и использования энергии, материалов, изделий или информации, либо существенного уменьшения степени этого участия или трудоёмкости выполняемых операций.",
	"BDD": "Методология разработки программного обеспечения, являющаяся ответвлением от методологии разработки через тестирование (TDD). Основной идеей данной методологии является совмещение в процессе разработки чисто технических интересов и интересов бизнеса, позволяя тем самым управляющему персоналу и программистам говорить на одном языке.",
	"BEHAVIOR DRIVEN DEVELOPMENT": "Методология разработки программного обеспечения, являющаяся ответвлением от методологии разработки через тестирование (TDD). Основной идеей данной методологии является совмещение в процессе разработки чисто технических интересов и интересов бизнеса, позволяя тем самым управляющему персоналу и программистам говорить на одном языке.",
	"CI": "Практика разработки программного обеспечения, которая заключается в постоянном слиянии рабочих копий в общую основную ветвь разработки (до нескольких раз в день) и выполнении частых автоматизированных сборок проекта для скорейшего выявления потенциальных дефектов и решения интеграционных проблем.",
	"CONTINUOUS INTEGRATION": "Практика разработки программного обеспечения, которая заключается в постоянном слиянии рабочих копий в общую основную ветвь разработки (до нескольких раз в день) и выполнении частых автоматизированных сборок проекта для скорейшего выявления потенциальных дефектов и решения интеграционных проблем.",
	"DATA-DRIVEN TESTING": "Тестирование на основе данных, также известное как тестирование на основе таблиц или параметризованное тестирование, представляет собой методологию тестирования программного обеспечения (юнит, интеграционных, чаще всего применимо к backend тестированию), при котором тест умеет принимать набор входных параметров, и эталонный результат или эталонное состояние, с которым он должен сравнить результат, полученный в ходе прогонки входных параметров.",
	"DDT": "Тестирование на основе данных, также известное как тестирование на основе таблиц или параметризованное тестирование, представляет собой методологию тестирования программного обеспечения (юнит, интеграционных, чаще всего применимо к backend тестированию), при котором тест умеет принимать набор входных параметров, и эталонный результат или эталонное состояние, с которым он должен сравнить результат, полученный в ходе прогонки входных параметров.",
	"END-TO-END TESTING": "Поведенческое тестирование по методу «чёрного ящика» (проверка выполнения приложением заданных функциональных требований, при которой не используются знания о внутренней структуре тестируемого объекта). То есть проверяется, что система работает, как планировалось, с точки зрения конечного пользователя.",
	"FRAMEWORK": "Программная платформа, определяющая структуру программной системы; программное обеспечение, облегчающее разработку и объединение разных компонентов большого программного проекта.",
	"INTEGRATION TESTING": "Одна из фаз тестирования программного обеспечения, при которой отдельные программные модули объединяются и тестируются в группе. Обычно интеграционное тестирование проводится после модульного тестирования и предшествует системному тестированию.",
	"KDT": "Подход к тестированию, согласно которому используются некоторые ключевые слова, детально описывающие набор выполняемых действий, которые, так или иначе, нужны для прохождения определенного шага тестового сценария. Для начала формируется набор ключевых слов, потом ассоциации (определенное действие или функция), связанные с данным ключевым словом. То есть каждый такой шаг теста, например, открытие и закрытие иконки браузера, клик мышки по объекту, описывается специальным ключевым словом – открыть или нажать (open browser или click).",
	"KEYWORD-DRIVEN TESTING": "Подход к тестированию, согласно которому используются некоторые ключевые слова, детально описывающие набор выполняемых действий, которые, так или иначе, нужны для прохождения определенного шага тестового сценария. Для начала формируется набор ключевых слов, потом ассоциации (определенное действие или функция), связанные с данным ключевым словом. То есть каждый такой шаг теста, например, открытие и закрытие иконки браузера, клик мышки по объекту, описывается специальным ключевым словом – открыть или нажать (open browser или click).",
	"LINTER": "Статический анализатор исходного кода. Проверяет синтаксис и корректность (неинициализированные переменные, например), не запуская компиляцию или выполнение (в зависимости от языка).", 
	"MOCK": "Объекты, которые настраиваются (например, специфично для каждого теста) и позволяют задать ожидания вызовы методов в виде ответов, которые мы планируем получить. Проверки соответствия ожиданиям проводятся через вызовы к Mock-объектам. Ипользуются для того, чтобы проверить, была ли функция вызвана с правильными аргументами.", 
	"MODEL-BASED TESTING": "Тестирование программного обеспечения, в котором варианты тестирования (англ. test cases) частично или целиком получаются из модели, описывающей некоторые аспекты (чаще функциональные) тестируемой системы (англ. system under test). Модели могут отображать желаемое поведение системы или использоваться для создания тестовых стратегий или среды тестирования. Модель, описывающая тестируемый объект, как правило, абстрактная и описывает лишь часть функциональности объекта.", 
	"OBJECT-DRIVEN TESTING": "Подход к автоматизации тестирования, при котором тестовые скрипты проектируются в виде классов, в которых реализуется логика работы с приложением.", 
	"ODT": "Подход к автоматизации тестирования, при котором тестовые скрипты проектируются в виде классов, в которых реализуется логика работы с приложением.", 
	"PERFORMANCE TESTING": "Вид тестирования, при котором  проверяется скорость отработки системы или ее части под определённой нагрузкой.", 
	"REGRESSION TESTING": "Тестирование, которое используется для проверки того, не влияет ли новый функционал или исправленные дефекты на существующий функционал приложения и не появляются ли старые дефекты.",
	"SANITY TESTING": "Узконаправленное тестирование достаточное для доказательства того, что конкретная функция работает согласно заявленным в спецификации требованиям. Является подмножеством регрессионного тестирования. Используется для определения работоспособности определенной части приложения после изменений произведенных в ней или окружающей среде. Обычно выполняется вручную.", 
	"SMOKE TESTING": "Тестирование, которое направлено на проверку самой главной, самой важной, самой ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения (или иного объекта, подвергаемого дымовому тестированию).",
	"STUB": "Функция-заглушка, которая всегда выводит один и тот же результат, вне зависимости от того, что было подано на вход. Используется для того, чтобы протестировать, как функция работает с полученным ответом.", 
	"SYSTEM TESTING": "Тестирование, направленное на проверку всего приложения как единого целого, собранного из частей, проверенных на двух предыдущих стадиях.",
	"TDD": "Подход, при котором сначала происходит написание тестов, их запуск (запуск выполняется с падением), после чего начинается написание непосредственно функции, для которой был написан тест. После успешного прохождения теста, он может дополняться деталями и негативными сценариями.", 
	"TEST AUTOMATION": "Процесс проверки программного обеспечения, который включает проведение таких основных функций и шагов теста, как запуск, инициализация, выполнение, анализ и выдача результата, автоматически посредством специализированных инструментов.",
	"TEST-DRIVEN DEVELOPMENT": "Подход, при котором сначала происходит написание тестов, их запуск (запуск выполняется с падением), после чего начинается написание непосредственно функции, для которой был написан тест. После успешного прохождения теста, он может дополняться деталями и негативными сценариями.", 
	"UI": "Интерфейс, обеспечивающий передачу информации между пользователем-человеком и программно-аппаратными компонентами компьютерной системы.", 
	"UNIT TESTING": "Тестирование, которое направлено на проверку отдельных небольших частей приложения, которые (как правило) можно исследовать изолированно от других подобных частей.", 
	"USABILITY": "Cпособность продукта быть понимаемым, изучаемым, используемым и привлекательным для пользователя в заданных условиях (ISO/IEC 25010); свойство системы, продукта или услуги, при наличии которого конкретный пользователь может эксплуатировать систему в определённых условиях для достижения установленных целей с необходимой результативностью, эффективностью и удовлетворённостью (ISO 9241-210).", 
	"USER INTERFACE": "Интерфейс, обеспечивающий передачу информации между пользователем-человеком и программно-аппаратными компонентами компьютерной системы.", 
	"АВТОМАТИЗАЦИЯ": "Одно из направлений научно-технического прогресса, использующее саморегулирующие технические средства и математические методы с целью освобождения человека от участия в процессах получения, преобразования, передачи и использования энергии, материалов, изделий или информации, либо существенного уменьшения степени этого участия или трудоёмкости выполняемых операций.", 
	"АВТОМАТИЗИРОВАННОЕ ТЕСТИРОВАНИЕ": "Процесс проверки программного обеспечения, который включает проведение таких основных функций и шагов теста, как запуск, инициализация, выполнение, анализ и выдача результата, автоматически посредством специализированных инструментов.",
	"БИБЛИОТЕКА": "Сборник подпрограмм или объектов, используемых для разработки программного обеспечения (ПО).", 
	"ДЫМОВОЕ ТЕСТИРОВАНИЕ": "Тестирование, которое направлено на проверку самой главной, самой важной, самой ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения (или иного объекта, подвергаемого дымовому тестированию).", 
	"ИНТЕГРАЦИОННОЕ ТЕСТИРОВАНИЕ": "Одна из фаз тестирования программного обеспечения, при которой отдельные программные модули объединяются и тестируются в группе. Обычно интеграционное тестирование проводится после модульного тестирования и предшествует системному тестированию.", 
	"КОЭФФИЦИЕНТ ROI": "Коэффициент, показывающий прибыльность или убыточность той или иной инвестиции.", 
	"ЛИНТЕР": "Статический анализатор исходного кода. Проверяет синтаксис и корректность (неинициализированные переменные, например), не запуская компиляцию или выполнение (в зависимости от языка).", 
	"МОДУЛЬНОЕ ТЕСТИРОВАНИЕ": "Тестирование, которое направлено на проверку отдельных небольших частей приложения, которые (как правило) можно исследовать изолированно от других подобных частей.", 
	"МОК": "Объекты, которые настраиваются (например, специфично для каждого теста) и позволяют задать ожидания вызовы методов в виде ответов, которые мы планируем получить. Проверки соответствия ожиданиям проводятся через вызовы к Mock-объектам. Ипользуются для того, чтобы проверить, была ли функция вызвана с правильными аргументами.",
	"НЕПРЕРЫВНАЯ ИНТЕГРАЦИЯ": "Практика разработки программного обеспечения, которая заключается в постоянном слиянии рабочих копий в общую основную ветвь разработки (до нескольких раз в день) и выполнении частых автоматизированных сборок проекта для скорейшего выявления потенциальных дефектов и решения интеграционных проблем.",
	"ПОЛЬЗОВАТЕЛЬСКИЙ ИНТЕРФЕЙС": "Интерфейс, обеспечивающий передачу информации между пользователем-человеком и программно-аппаратными компонентами компьютерной системы.", 
	"ПРОГРАММНЫЙ ИНТЕРФЕЙС ПРИЛОЖЕНИЯ": "Описание способов (набор классов, процедур, функций, структур или констант), которыми одна компьютерная программа может взаимодействовать с другой программой.", 
	"РАЗРАБОТКА НА ОСНОВЕ ПОВЕДЕНИЯ": "Методология разработки программного обеспечения, являющаяся ответвлением от методологии разработки через тестирование (TDD). Основной идеей данной методологии является совмещение в процессе разработки чисто технических интересов и интересов бизнеса, позволяя тем самым управляющему персоналу и программистам говорить на одном языке.", 
	"РАЗРАБОТКА ЧЕРЕЗ ТЕСТИРОВАНИЕ": "Подход, при котором сначала происходит написание тестов, их запуск (запуск выполняется с падением), после чего начинается написание непосредственно функции, для которой был написан тест. После успешного прохождения теста, он может дополняться деталями и негативными сценариями.", 
	"РЕГРЕССИОННОЕ ТЕСТИРОВАНИЕ": "Тестирование, которое используется для проверки того, не влияет ли новый функционал или исправленные дефекты на существующий функционал приложения и не появляются ли старые дефекты.", 
	"САНИТАРНОЕ ТЕСТИРОВАНИЕ": "Узконаправленное тестирование достаточное для доказательства того, что конкретная функция работает согласно заявленным в спецификации требованиям. Является подмножеством регрессионного тестирования. Используется для определения работоспособности определенной части приложения после изменений произведенных в ней или окружающей среде. Обычно выполняется вручную.", 
	"СИСТЕМНОЕ ТЕСТИРОВАНИЕ": "Тестирование, направленное на проверку всего приложения как единого целого, собранного из частей, проверенных на двух предыдущих стадиях.",
	"СКВОЗНОЕ ТЕСТИРОВАНИЕ": "Поведенческое тестирование по методу «чёрного ящика» (проверка выполнения приложением заданных функциональных требований, при которой не используются знания о внутренней структуре тестируемого объекта). То есть проверяется, что система работает, как планировалось, с точки зрения конечного пользователя.", 
	"СТАБ": "Функция-заглушка, которая всегда выводит один и тот же результат, вне зависимости от того, что было подано на вход. Используется для того, чтобы протестировать, как функция работает с полученным ответом.", 
	"ТЕСТИРОВАНИЕ НА ОСНОВЕ МОДЕЛЕЙ": "Тестирование программного обеспечения, в котором варианты тестирования (англ. test cases) частично или целиком получаются из модели, описывающей некоторые аспекты (чаще функциональные) тестируемой системы (англ. system under test). Модели могут отображать желаемое поведение системы или использоваться для создания тестовых стратегий или среды тестирования. Модель, описывающая тестируемый объект, как правило, абстрактная и описывает лишь часть функциональности объекта.", 
	"ТЕСТИРОВАНИЕ ПРОИЗВОДИТЕЛЬНОСТИ": "Вид тестирования, при котором  проверяется скорость отработки системы или ее части под определённой нагрузкой.", 
	"ТЕСТИРОВАНИЕ НА ОСНОВЕ ДАННЫХ": "Тестирование на основе данных, также известное как тестирование на основе таблиц или параметризованное тестирование, представляет собой методологию тестирования программного обеспечения (юнит, интеграционных, чаще всего применимо к backend тестированию), при котором тест умеет принимать набор входных параметров, и эталонный результат или эталонное состояние, с которым он должен сравнить результат, полученный в ходе прогонки входных параметров.", 
	"ТЕСТЫ, УПРАВЛЯЕМЫЕ ПОВЕДЕНИЕМ": "Способ разработки автоматизированных тест-кейсов, в котором основное внимание уделяется корректности работы бизнес-сценариев, а не отдельным деталям функционирования приложения.",
	"BEHAVIOR-DRIVEN TESTING": "Способ разработки автоматизированных тест-кейсов, в котором основное внимание уделяется корректности работы бизнес-сценариев, а не отдельным деталям функционирования приложения.",
	"BDT": "Способ разработки автоматизированных тест-кейсов, в котором основное внимание уделяется корректности работы бизнес-сценариев, а не отдельным деталям функционирования приложения.",
	"ТЕСТЫ, УПРАВЛЯЕМЫЕ КЛЮЧЕВЫМИ СЛОВАМИ": "Подход к тестированию, согласно которому используются некоторые ключевые слова, детально описывающие набор выполняемых действий, которые, так или иначе, нужны для прохождения определенного шага тестового сценария. Для начала формируется набор ключевых слов, потом ассоциации (определенное действие или функция), связанные с данным ключевым словом. То есть каждый такой шаг теста, например, открытие и закрытие иконки браузера, клик мышки по объекту, описывается специальным ключевым словом – открыть или нажать (open browser или click).", 
	"ТЕСТЫ, УПРАВЛЯЕМЫЕ ОБЪЕКТАМИ": "Подход к автоматизации тестирования, при котором тестовые скрипты проектируются в виде классов, в которых реализуется логика работы с приложением.", 
	"ФРЕЙМВОРК": "Программная платформа, определяющая структуру программной системы; программное обеспечение, облегчающее разработку и объединение разных компонентов большого программного проекта.",
	"УДОБСТВО ИСПОЛЬЗОВАНИЯ": "Способность продукта быть понимаемым, изучаемым, используемым и привлекательным для пользователя в заданных условиях (ISO/IEC 25010); свойство системы, продукта или услуги, при наличии которого конкретный пользователь может эксплуатировать систему в определённых условиях для достижения установленных целей с необходимой результативностью, эффективностью и удовлетворённостью (ISO 9241-210).",
	"БЭКЕНД": "Программно-аппаратная часть сервиса.",
	"ФРОНТЕНД": "Клиентская сторона пользовательского интерфейса по отношению к программно-аппаратной части сервиса. Разработка функциональности и пользовательского интерфейса, работающих на клиентской стороне приложения или веб-сайта.",
	"ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ": "Тестирование ПО в целях проверки реализуемости функциональных требований, то есть способности ПО в определённых условиях решать задачи, нужные пользователям.",
	"НЕФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ": "Вид тестирования, направленный на проверку нефункциональных особенностей приложения (корректность реализации нефункциональных требований), таких как удобство использования, совместимость, производительность, безопасность и т.д.",
	"СТАТИЧЕСКОЕ ТЕСТИРОВАНИЕ": "Тип тестирования программного обеспечения, при которой ПО тестируется без запуска кода. Оно представляет собой процесс или технику, которые выполняются для поиска потенциальных дефектов в программном обеспечении.",
	"ДИНАМИЧЕСКОЕ ТЕСТИРОВАНИЕ": "Тестирование с запуском кода на исполнение.",
	"ТЕСТИРОВАНИЕ": "Проверка соответствия между реальным и ожидаемым поведением программы, осуществляемая на конечном наборе тестов, выбранном определенным образом. В более широком смысле, тестирование — это одна из техник контроля качества, включающая в себя активности по планированию работ (Test Management), проектированию тестов (Test Design), выполнению тестирования (Test Execution) и анализу полученных результатов (Test Analysis).",
	"TESTING": "Проверка соответствия между реальным и ожидаемым поведением программы, осуществляемая на конечном наборе тестов, выбранном определенным образом. В более широком смысле, тестирование — это одна из техник контроля качества, включающая в себя активности по планированию работ (Test Management), проектированию тестов (Test Design), выполнению тестирования (Test Execution) и анализу полученных результатов (Test Analysis).",
	"МАНУЛЬНОЕ ТЕСТИРОВАНИЕ": "Часть процесса тестирования на этапе контроля качества в процессе разработки программного обеспечения. Оно проводится тестировщиками или обычными пользователи путем моделирования возможных сценариев действия пользователя.",
	"MANUAL TESTING": "Часть процесса тестирования на этапе контроля качества в процессе разработки программного обеспечения. Оно проводится тестировщиками или обычными пользователи путем моделирования возможных сценариев действия пользователя.",
	"ЗАПИСЬ-ВОСПРОИЗВЕДЕНИЕ": "Метод автоматизации запись-воспроизведение реализуется без знаний программирования, как правило, с помощью специальных инструментов, которые позволяют при выполнении действий в браузере сохранять их как скрипты тестовых сценариев.",
	"RECORD&PLAYBACK": "Метод автоматизации запись-воспроизведение реализуется без знаний программирования, как правило, с помощью специальных инструментов, которые позволяют при выполнении действий в браузере сохранять их как скрипты тестовых сценариев.",
	"FUNCTIONAL TESTING": "Тестирование ПО в целях проверки реализуемости функциональных требований, то есть способности ПО в определённых условиях решать задачи, нужные пользователям.",
	"NON-FUNCTIONAL TESTING": "Вид тестирования, направленный на проверку нефункциональных особенностей приложения (корректность реализации нефункциональных требований), таких как удобство использования, совместимость, производительность, безопасность и т.д.",
	"STATIC TESTING": "Тип тестирования программного обеспечения, при которой ПО тестируется без запуска кода. Оно представляет собой процесс или технику, которые выполняются для поиска потенциальных дефектов в программном обеспечении.",
	"DYNAMIC TESTING": "Тестирование с запуском кода на исполнение.",
	"FRONTEND": "Клиентская сторона пользовательского интерфейса по отношению к программно-аппаратной части сервиса. Разработка функциональности и пользовательского интерфейса, работающих на клиентской стороне приложения или веб-сайта.",
	"BACKEND": "Программно-аппаратная часть сервиса."
}
